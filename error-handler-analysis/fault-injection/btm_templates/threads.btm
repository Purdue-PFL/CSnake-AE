############# Wrapped Runnable in Thread #########################

RULE ThreadWrappedRunnableMap1 
CLASS java.lang.Thread 
METHOD <init>(Runnable)
AT EXIT 
IF true 
DO mapRunnableToThread($0, $1)
ENDRULE 

RULE ThreadWrappedRunnableMap2
CLASS java.lang.Thread 
METHOD <init>(Runnable, String)
AT EXIT 
IF true 
DO mapRunnableToThread($0, $1)
ENDRULE 

RULE ThreadWrappedRunnableMap3
CLASS java.lang.Thread 
METHOD <init>(ThreadGroup, Runnable)
AT EXIT 
IF true 
DO mapRunnableToThread($0, $2)
ENDRULE 

RULE ThreadWrappedRunnableMap4
CLASS java.lang.Thread 
METHOD <init>(ThreadGroup, Runnable, String)
AT EXIT 
IF true 
DO mapRunnableToThread($0, $2)
ENDRULE 

RULE ThreadWrappedRunnableMap5
CLASS java.lang.Thread 
METHOD <init>(ThreadGroup, Runnable, String, long)
AT EXIT 
IF true 
DO mapRunnableToThread($0, $2)
ENDRULE 

################### Thread Creation ###################

RULE ThreadCreate1
CLASS java.lang.Thread
METHOD start
AT ENTRY 
IF true 
DO threadCreate($0)
ENDRULE

RULE ThreadCreate2
INTERFACE java.util.concurrent.Executor
METHOD execute
AT ENTRY 
BIND runnableObj:Runnable = $1
IF true 
DO threadCreate(runnableObj)
ENDRULE

################## Runnable Added to Queues viewed as Thread Creation ##########################

RULE QueueAdd
INTERFACE java.util.Queue 
METHOD add 
AT ENTRY 
IF $1 instanceof java.lang.Runnable
DO threadCreate($1)
ENDRULE 

RULE QueueOffer 
INTERFACE java.util.Queue 
METHOD offer 
AT ENTRY 
IF $1 instanceof java.lang.Runnable
DO threadCreate($1)
ENDRULE 

RULE BlockingQueuePut 
INTERFACE java.util.concurrent.BlockingQueue 
METHOD put 
AT ENTRY  
IF $1 instanceof java.lang.Runnable
DO threadCreate($1)
ENDRULE 

############### Thread Execution (Thread.start() is essentially Runnable.run()) #############################

RULE ThreadExecute
INTERFACE ^java.lang.Runnable
METHOD run 
AT ENTRY 
BIND runnableObj:Runnable = $0
IF NOT callerEquals("run")
DO threadExecute(runnableObj)  
ENDRULE
